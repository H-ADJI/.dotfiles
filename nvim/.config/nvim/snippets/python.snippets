snippet plr
  yield PlaywrightRequest(
                        $1,
                        callback=self.$2,
                        meta={
                            "cache_this": True,
                            "playwright": {
                                "wait_time": self.wait_time,
                            },
                        },
                        cb_kwargs=dict(),
                        dont_filter=True,
                    )

snippet prx
    proxy = playwright_proxy = ["AWS_EU", "IPROYAL_RESIDENTIAL", "OXYLABS_DC", "OXYLABS_RESIDENTIAL"]
    oxylabs_dc_country = oxylabs_residential_country = iproyal_residential_country = "$1"
    oxylabs_residential_continent = "$2"

snippet banser
  import random
  from urllib.parse import urljoin

  from core.config import BannerTypes
  from core.requests_di import PlaywrightRequest
  from core.spiders_fwk.playwright_spider import PlaywrightSpider
  from core.spiders_fwk.v4_spider import V4Spider
  from items.banner_category import ItemBannerProduct
  from items.banner_search import ItemBannerSearch
  from parsel import Selector
  from playwright.async_api import Page
  from scrapy.http import HtmlResponse
  from spiders.$1 import $2
  from tools.banner_utils import BucketImage, playwright_screenshot


  class BannerSearch(PlaywrightSpider, V4Spider):
      retailer_id = $3
      domain = $4
      proxy = playwright_proxy = ["AWS_US", "AWS_EU", "IPROYAL_RESIDENTIAL", "OXYLABS_DC", "OXYLABS_RESIDENTIAL"]
      oxylabs_dc_country = oxylabs_residential_country = iproyal_residential_country = "SK"
      oxylabs_residential_continent = "EU"
      browser = ["chrome/124", "chrome/120", "chrome/117", "firefox/123", "firefox/120", "firefox/118"]
      playwright_nb_tabs = 2
      playwright_disable_webrtc = True
      playwright_allow_images = True
      playwright_visible = True
      custom_settings = {
          "DOWNLOADER_MIDDLEWARES": {"middlewares.custom_cache_middleware.SelectiveCacheMiddleware": 44},
          "SPIDER_MIDDLEWARES": {
              "middlewares.pagination_position_middleware.PositionDefaultMiddleware": None,
              "middlewares.image_downloading_middleware.ImageDownloadingDefaultMiddleware": 999,
          },
      }
      classic_selector = []
      sponsored_selector = []
      showcase_selector = []
      slider_selector = []
      keywords: list[tuple[str, str]]

      @property
      def wait_time(self) -> int:
          return random.randint(self.playwright_nb_tabs * 3, self.playwright_nb_tabs * 6)

      def start_requests(self):
          yield PlaywrightRequest(
              url=self.domain, callback=self.parse_keywords, meta={"playwright": {"action": self.accept_cookies}}
          )

      def parse_keywords(self, _: HtmlResponse):
          for keyword, lower_keyword in self.keywords:
              yield PlaywrightRequest(
                  self.domain,
                  callback=self.parse_banners,
                  meta={
                      "keyword": lower_keyword,
                      "playwright": {
                          "wait_time": self.wait_time,
                          "action": self.get_banners,
                      },
                  },
                  dont_filter=True,
                  cb_kwargs=dict(keyword=keyword),
              )

      async def accept_cookies(self, page: Page, _, playwright_request: PlaywrightRequest):
          await self.accept_popups(page)

      @staticmethod
      async def accept_popups(page: Page):
          button = page.locator("")
          if await button.count():
              await button.click()

      @staticmethod
      async def load_content(page: Page, n: int = 3):
          for _ in range(n):
              await page.keyboard.press("PageDown")
              await page.wait_for_timeout(timeout=1_000)
          for _ in range(n):
              await page.keyboard.press("PageUp")
              await page.wait_for_timeout(timeout=1_000)

      async def scrape_banners(
          self, page: Page, selectors: list[str], iframe: bool = False, screen=False
      ) -> list[tuple[BucketImage, Selector, str]]:
          banners = []
          for selector in selectors:
              locators = page.locator(selector=selector)
              banners_count = await locators.count()
              self.logger.debug(f"Found {banners_count} elements using selector {selector}")
              for i in range(banners_count):
                  banner = locators.nth(i)
                  screenshot = None
                  if iframe:
                      banner = banner.frame_locator("//iframe").locator("//body")
                  if screen:
                      if await banner.is_visible():
                          screenshot = await playwright_screenshot(element=banner)
                          await page.wait_for_timeout(500)
                  html = await banner.evaluate("element => element.outerHTML")
                  source = Selector(html)
                  banners.append((screenshot, source, selector))
          return banners

      async def get_banners(self, page: Page, _, playwright_request: PlaywrightRequest):
          playwright_request.meta["classic"] = await self.scrape_banners(page, self.classic_selector, screen=True)
          playwright_request.meta["sponsored"] = await self.scrape_banners(page, self.sponsored_selector, screen=True)
          playwright_request.meta["showcase"] = await self.scrape_banners(page, self.classic_selector, screen=True)
          playwright_request.meta["slider"] = await self.scrape_banners(page, self.slider_selector)

      def banner_builder(
          self, banners: list[tuple[BucketImage, Selector, str]], banner_type: BannerTypes, current_url: str, keyword: str
      ):
          for screenshot, src, selector in banners:
              item = ItemBannerSearch()
              item["current_url"] = current_url
              item["other"] = selector
              img_url = src.xpath(".//img/@src").get() or src.xpath(".//source/@srcset").get()
              if not img_url:
                  continue
              item["html_image"] = item["image_url"] = urljoin(self.domain, img_url)
              item["title"] = src.xpath(".//img/@alt").get()
              item["banner_type"] = banner_type
              if screenshot:
                  item["screenshot_image"] = item["image_url"] = screenshot
              item["keyword"] = keyword
              item["products"] = []
              # add banners products
              redirect_url = (
                  src.xpath(".//a[not(contains(@href,'adssettings'))]/@href").get()
                  or src.xpath(".//a/@href").get()
                  or src.xpath("./@href").get()
              )
              if banner_type == BannerTypes.SPONSORED_PRODUCT or banner_type == BannerTypes.SHOWCASE:
                  pass
              elif redirect_url:
                  item["redirect_url"] = urljoin(self.domain, redirect_url)
                  yield PlaywrightRequest(
                      item["redirect_url"],
                      callback=self.add_products,
                      meta={
                          "cache_this": True,
                          "playwright": {
                              "wait_time": self.wait_time,
                          },
                      },
                      cb_kwargs=dict(banner=item),
                      dont_filter=True,
                  )
              else:
                  yield item

      def parse_banners(self, response: HtmlResponse, keyword: str):
          banners = response.meta["classic"]
          yield from self.banner_builder(
              banners=banners,
              banner_type=BannerTypes.CLASSIC,
              current_url=response.url,
              keyword=keyword,
          )
          banners = response.meta["sponsored"]
          yield from self.banner_builder(
              banners=banners,
              banner_type=BannerTypes.SPONSORED_PRODUCT,
              current_url=response.url,
              keyword=keyword,
          )
          banners = response.meta["showcase"]
          yield from self.banner_builder(
              banners=banners,
              banner_type=BannerTypes.SHOWCASE,
              current_url=response.url,
              keyword=keyword,
          )
          banners = response.meta["slider"]
          yield from self.banner_builder(
              banners=banners,
              banner_type=BannerTypes.CLASSIC,
              current_url=response.url,
              keyword=keyword,
          )

      def add_products(self, response: HtmlResponse, banner: ItemBannerSearch):
          products = []
          if matches := response.xpath(""):
              for m in matches:
                  product = ItemBannerProduct()
                  product["id"] = m.xpath("")
                  product["detail_link"] = m.xpath("").get()
                  product["image_link"] = m.xpath("").get()
                  products.append(product)
          elif pdp_match := response.xpath(""):
              product = ItemBannerProduct()
              product["id"] = pdp_match.xpath("")
              product["detail_link"] = pdp_match.xpath("").get()
              product["image_link"] = pdp_match.xpath("").get()
              products.append(product)

          banner["products"] = products or None
          yield banner
